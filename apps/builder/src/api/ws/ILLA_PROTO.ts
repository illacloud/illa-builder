// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "ILLA_PROTO.proto" (package "tutorial", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime"
import type { IBinaryWriter } from "@protobuf-ts/runtime"
import { WireType } from "@protobuf-ts/runtime"
import type { BinaryReadOptions } from "@protobuf-ts/runtime"
import type { IBinaryReader } from "@protobuf-ts/runtime"
import { UnknownFieldHandler } from "@protobuf-ts/runtime"
import type { PartialMessage } from "@protobuf-ts/runtime"
import { reflectionMergePartial } from "@protobuf-ts/runtime"
import { MESSAGE_TYPE } from "@protobuf-ts/runtime"
import { MessageType } from "@protobuf-ts/runtime"

/**
 * @generated from protobuf message tutorial.MovingMessageBin
 */
export interface MovingMessageBin {
  /**
   * @generated from protobuf field: tutorial.Signal signal = 1;
   */
  signal: Signal // see package ws const define
  /**
   * @generated from protobuf field: tutorial.Target target = 2;
   */
  target: Target
  /**
   * @generated from protobuf field: string clientID = 3;
   */
  clientID: string // message sender client ID
  /**
   * @generated from protobuf field: bool needBroadcast = 4;
   */
  needBroadcast: boolean
  /**
   * @generated from protobuf field: string userID = 5;
   */
  userID: string // message sender user ID
  /**
   * @generated from protobuf field: string nickname = 6;
   */
  nickname: string // message sender user ID
  /**
   * @generated from protobuf field: int32 status = 7;
   */
  status: number // set instance to status, 0 for empty status
  /**
   * @generated from protobuf field: string parentDisplayName = 8;
   */
  parentDisplayName: string // parent component displayname
  /**
   * @generated from protobuf field: string displayNames = 9;
   */
  displayNames: string // message affected component display names, separate with comma ","
  /**
   * @generated from protobuf field: float x = 10;
   */
  x: number // instance x, by illa ubilder canvas dot
  /**
   * @generated from protobuf field: float y = 11;
   */
  y: number // instance y, by illa ubilder canvas dot
  /**
   * @generated from protobuf field: uint32 w = 12;
   */
  w: number // instance w, by illa ubilder canvas dot
  /**
   * @generated from protobuf field: uint32 h = 13;
   */
  h: number // instance h, by illa ubilder canvas dot
}
/**
 * @generated from protobuf enum tutorial.Signal
 */
export enum Signal {
  /**
   * @generated from protobuf enum value: SIGNAL_PING = 0;
   */
  PING = 0,
  /**
   * @generated from protobuf enum value: SIGNAL_ENTER = 1;
   */
  ENTER = 1,
  /**
   * @generated from protobuf enum value: SIGNAL_LEAVE = 2;
   */
  LEAVE = 2,
  /**
   * @generated from protobuf enum value: SIGNAL_CREATE_STATE = 3;
   */
  CREATE_STATE = 3,
  /**
   * @generated from protobuf enum value: SIGNAL_DELETE_STATE = 4;
   */
  DELETE_STATE = 4,
  /**
   * @generated from protobuf enum value: SIGNAL_UPDATE_STATE = 5;
   */
  UPDATE_STATE = 5,
  /**
   * @generated from protobuf enum value: SIGNAL_MOVE_STATE = 6;
   */
  MOVE_STATE = 6,
  /**
   * @generated from protobuf enum value: SIGNAL_CREATE_OR_UPDATE_STATE = 7;
   */
  CREATE_OR_UPDATE_STATE = 7,
  /**
   * @generated from protobuf enum value: SIGNAL_BROADCAST_ONLY = 8;
   */
  BROADCAST_ONLY = 8,
  /**
   * @generated from protobuf enum value: SIGNAL_PUT_STATE = 9;
   */
  PUT_STATE = 9,
  /**
   * @generated from protobuf enum value: SIGNAL_GLOBAL_BROADCAST_ONLY = 10;
   */
  GLOBAL_BROADCAST_ONLY = 10,
  /**
   * @generated from protobuf enum value: SIGNAL_COOPERATE_ATTACH = 11;
   */
  COOPERATE_ATTACH = 11,
  /**
   * @generated from protobuf enum value: SIGNAL_COOPERATE_DISATTACH = 12;
   */
  COOPERATE_DISATTACH = 12,
  /**
   * @generated from protobuf enum value: SIGNAL_MOVE_CURSOR = 13;
   */
  MOVE_CURSOR = 13,
}
/**
 * @generated from protobuf enum tutorial.Target
 */
export enum Target {
  /**
   * placeholder for nothing
   *
   * @generated from protobuf enum value: TARGET_NOTHING = 0;
   */
  NOTHING = 0,
  /**
   * ComponentsState
   *
   * @generated from protobuf enum value: TARGET_COMPONENTS = 1;
   */
  COMPONENTS = 1,
  /**
   * DependenciesState
   *
   * @generated from protobuf enum value: TARGET_DEPENDENCIES = 2;
   */
  DEPENDENCIES = 2,
  /**
   * DragShadowState
   *
   * @generated from protobuf enum value: TARGET_DRAG_SHADOW = 3;
   */
  DRAG_SHADOW = 3,
  /**
   * DottedLineSquareState
   *
   * @generated from protobuf enum value: TARGET_DOTTED_LINE_SQUARE = 4;
   */
  DOTTED_LINE_SQUARE = 4,
  /**
   * DisplayNameState
   *
   * @generated from protobuf enum value: TARGET_DISPLAY_NAME = 5;
   */
  DISPLAY_NAME = 5,
  /**
   * only for broadcast
   *
   * @generated from protobuf enum value: TARGET_APPS = 6;
   */
  APPS = 6,
  /**
   * only for broadcast
   *
   * @generated from protobuf enum value: TARGET_RESOURCE = 7;
   */
  RESOURCE = 7,
  /**
   * only for broadcast
   *
   * @generated from protobuf enum value: TARGET_ACTION = 8;
   */
  ACTION = 8,
  /**
   * only for broadcast
   *
   * @generated from protobuf enum value: TARGET_CURSOR = 9;
   */
  CURSOR = 9,
}
// @generated message type with reflection information, may provide speed optimized methods
class MovingMessageBin$Type extends MessageType<MovingMessageBin> {
  constructor() {
    super("tutorial.MovingMessageBin", [
      {
        no: 1,
        name: "signal",
        kind: "enum",
        T: () => ["tutorial.Signal", Signal, "SIGNAL_"],
      },
      {
        no: 2,
        name: "target",
        kind: "enum",
        T: () => ["tutorial.Target", Target, "TARGET_"],
      },
      { no: 3, name: "clientID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: "needBroadcast",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      { no: 5, name: "userID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
      {
        no: 8,
        name: "parentDisplayName",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 9,
        name: "displayNames",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 10, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
      { no: 11, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
      { no: 12, name: "w", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      { no: 13, name: "h", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
    ])
  }
  create(value?: PartialMessage<MovingMessageBin>): MovingMessageBin {
    const message = {
      signal: 0,
      target: 0,
      clientID: "",
      needBroadcast: false,
      userID: "",
      nickname: "",
      status: 0,
      parentDisplayName: "",
      displayNames: "",
      x: 0,
      y: 0,
      w: 0,
      h: 0,
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<MovingMessageBin>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MovingMessageBin,
  ): MovingMessageBin {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* tutorial.Signal signal */ 1:
          message.signal = reader.int32()
          break
        case /* tutorial.Target target */ 2:
          message.target = reader.int32()
          break
        case /* string clientID */ 3:
          message.clientID = reader.string()
          break
        case /* bool needBroadcast */ 4:
          message.needBroadcast = reader.bool()
          break
        case /* string userID */ 5:
          message.userID = reader.string()
          break
        case /* string nickname */ 6:
          message.nickname = reader.string()
          break
        case /* int32 status */ 7:
          message.status = reader.int32()
          break
        case /* string parentDisplayName */ 8:
          message.parentDisplayName = reader.string()
          break
        case /* string displayNames */ 9:
          message.displayNames = reader.string()
          break
        case /* float x */ 10:
          message.x = reader.float()
          break
        case /* float y */ 11:
          message.y = reader.float()
          break
        case /* uint32 w */ 12:
          message.w = reader.uint32()
          break
        case /* uint32 h */ 13:
          message.h = reader.uint32()
          break
        default:
          let u = options.readUnknownField
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: MovingMessageBin,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* tutorial.Signal signal = 1; */
    if (message.signal !== 0)
      writer.tag(1, WireType.Varint).int32(message.signal)
    /* tutorial.Target target = 2; */
    if (message.target !== 0)
      writer.tag(2, WireType.Varint).int32(message.target)
    /* string clientID = 3; */
    if (message.clientID !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.clientID)
    /* bool needBroadcast = 4; */
    if (message.needBroadcast !== false)
      writer.tag(4, WireType.Varint).bool(message.needBroadcast)
    /* string userID = 5; */
    if (message.userID !== "")
      writer.tag(5, WireType.LengthDelimited).string(message.userID)
    /* string nickname = 6; */
    if (message.nickname !== "")
      writer.tag(6, WireType.LengthDelimited).string(message.nickname)
    /* int32 status = 7; */
    if (message.status !== 0)
      writer.tag(7, WireType.Varint).int32(message.status)
    /* string parentDisplayName = 8; */
    if (message.parentDisplayName !== "")
      writer.tag(8, WireType.LengthDelimited).string(message.parentDisplayName)
    /* string displayNames = 9; */
    if (message.displayNames !== "")
      writer.tag(9, WireType.LengthDelimited).string(message.displayNames)
    /* float x = 10; */
    if (message.x !== 0) writer.tag(10, WireType.Bit32).float(message.x)
    /* float y = 11; */
    if (message.y !== 0) writer.tag(11, WireType.Bit32).float(message.y)
    /* uint32 w = 12; */
    if (message.w !== 0) writer.tag(12, WireType.Varint).uint32(message.w)
    /* uint32 h = 13; */
    if (message.h !== 0) writer.tag(13, WireType.Varint).uint32(message.h)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message tutorial.MovingMessageBin
 */
export const MovingMessageBin = new MovingMessageBin$Type()
